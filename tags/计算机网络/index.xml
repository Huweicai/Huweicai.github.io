<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算机网络 on Anonymous&#39; Blog</title>
    <link>https://huweicai.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
    <description>Recent content in 计算机网络 on Anonymous&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Tue, 22 Oct 2024 20:47:00 +0800</lastBuildDate><atom:link href="https://huweicai.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数据的蒲公英——组播</title>
      <link>https://huweicai.com/multicast/</link>
      <pubDate>Tue, 22 Oct 2024 20:47:00 +0800</pubDate>
      
      <guid>https://huweicai.com/multicast/</guid>
      <description>组播与单播 组播(Multicast，又称群播、多播) 与单播 (Unicast) 都是数据传输的一种方式，如果要映射现实世界中的信息传递方式，单播可以类比为打电话，有人呼出电话然后有人接听，然后他们互相畅谈最后互道再见；而组播则更加类似于广播，电台的主播会在收音机的那一头说话，所有打开收音机的人都可以收到，你也可以随时关闭收音机，只能单方面的听到来自对方的声音。 虽然今天到处都是打电话的人，而我们已经很少能在身边看到广播</description>
    </item>
    
    <item>
      <title>容器网络可视化：Weave Scope</title>
      <link>https://huweicai.com/weave-scope/</link>
      <pubDate>Wed, 27 Apr 2022 23:42:00 +0800</pubDate>
      
      <guid>https://huweicai.com/weave-scope/</guid>
      <description>Scope 简介 scope 是 weavework 开源的一款容器集群网络可视化监控方案，可以提供整个集群的实时网络拓扑，能具体到容器内进程这一粒度，同时还能提供对容器进行简单的详情查看、销毁、远程登录等管理功能。 功能 Overview 下图是 scope 的管理后台，打开可以看到图中有很多个六边形，代表一个个容器，而容器之间的连线则代表它们之间当前存在网络连接，鼠标悬浮到线条之上还能看到连接发起的方向，这样我们就能直观地观察到整个集群的网络流量拓扑了，哪几个服务之</description>
    </item>
    
    <item>
      <title>Cilium 容器数据路径</title>
      <link>https://huweicai.com/cilium-container-datapath/</link>
      <pubDate>Sat, 19 Feb 2022 11:00:00 +0800</pubDate>
      
      <guid>https://huweicai.com/cilium-container-datapath/</guid>
      <description>Cilium Cilium 提供了一套基于 eBPF 的容器网络方案，在网络可观测性和隔离策略方面提供了非常多强大的特性。 我们今天主要关注 Cilium 容器数据面路径这个话题，即一个使用 Cilium 做为 CNI 的 Pod 的数据是如何流动的。 这里我们以在 Pod 中向 1.1.1.1:80发起 TCP 连接（nc -v 1.1.1.1 80）的流量为例进行分析，演示的 Cilium 集群使用 veth pair 打通容器和宿主机网络命名空间，同时使用 vxlan 模式来进行跨主机间的 Pod 通信。 这里我们使用 Pod 10.1.128.86 进行演示，其所在 Node IP 为 10.11.224</description>
    </item>
    
    <item>
      <title>手动实现一个Linux容器</title>
      <link>https://huweicai.com/run-linux-container-manual/</link>
      <pubDate>Wed, 14 Apr 2021 16:20:00 +0800</pubDate>
      
      <guid>https://huweicai.com/run-linux-container-manual/</guid>
      <description>容器 容器技术的出现，彻底颠覆了传统的应用交付部署方式，交付的边界不再仅限于代码，而是一整套能 run everywhere 的基础设施，正如容器化领域的集大成者 Docker 的标语所言，这是一个新的时代了： Accelerate how you build, share and run modern applications. 容器本质上就是一个软件包，包含了业务服务及其依赖组件，比如我有一个Java服务，依赖了jdk 14.0.1以及几个外部 jar包，同时我们还依赖发行版的一些特性，需要运行在 debian buster发行版上，那么我们可以把这些通通打</description>
    </item>
    
    <item>
      <title>VPN是如何工作的</title>
      <link>https://huweicai.com/how-vpn-works/</link>
      <pubDate>Tue, 22 Dec 2020 23:42:00 +0800</pubDate>
      
      <guid>https://huweicai.com/how-vpn-works/</guid>
      <description>VPN 想象一下这两种场景： 你下班家，公司线上一台机器出事故了，这个时候你需要远程到这台机器上来排查并处理问题。 你在其他城市实习，这个时候学校需要选下学期的课了，但是教务网站只对校园网开放。 在这两种场景中，都离不开一种关键的技术：VPN（Virtual Private Network：虚拟局域网）。 VPN提供了一种在公网上安全的加入局域网的方式，可以我们这里就以开源的 OpenConnect VPN 为例，探讨一下 VPN 这种技术是如何安全的将局域网在互</description>
    </item>
    
    <item>
      <title>一个网络数据包的深度解剖</title>
      <link>https://huweicai.com/who-network-capture-analysis/</link>
      <pubDate>Wed, 01 Jul 2020 01:47:00 +0800</pubDate>
      
      <guid>https://huweicai.com/who-network-capture-analysis/</guid>
      <description>众所周知，网络是分层的，国际标准化组织将网络划分了七层，定义于 ISO/IEC 7498-1，也就是我们所熟知的 ISO 七层模型。 自底向上分别是：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。 以我们所熟知的应用层协议，超文本传输协议（HTTP: HyperText Transfer Protocol）为例，它位于这个模型中的最高的一层，应用进程发送 HTTP 请求包发出之后，会一层一层往下叠加头部直到最终变成最底层的物理信号 0 1 0 1 比特流在网线上传输</description>
    </item>
    
  </channel>
</rss>
