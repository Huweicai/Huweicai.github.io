<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on Anonymous&#39; Blog</title>
    <link>https://huweicai.com/tags/programming/</link>
    <description>Recent content in programming on Anonymous&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Sat, 12 Jul 2025 19:58:00 +0800</lastBuildDate><atom:link href="https://huweicai.com/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>一些有意思的C&#43;&#43;代码</title>
      <link>https://huweicai.com/cpp-fun-codes/</link>
      <pubDate>Sat, 12 Jul 2025 19:58:00 +0800</pubDate>
      
      <guid>https://huweicai.com/cpp-fun-codes/</guid>
      <description>三行情诗 谁说我们写 C++ 的就不懂浪漫了： // 我的心必须通过&amp;#34;爱你&amp;#34;的约束才能实例化 template&amp;lt;typename Heart&amp;gt; requires loves&amp;lt;Heart, You&amp;gt; // 激情、忠诚、永恒置入爱的元组，这份爱在编译时就已确定，不会因运行时的变化而改变 // 是写在源码里的承诺，是嵌入二进制的誓言 constexpr auto my_feelings = std::tuple{passion, devotion, eternity}; // 在 C++ 的类型系统中，我们的未来被特化为永远为真，这是编译器都认可的事实 template&amp;lt;&amp;gt; struct future&amp;lt;us&amp;gt; : std::true_type { static constexpr auto value = forever; }; 不愧是我们写 C++ 的，写出来的情诗都能是零运行时开销的。 AND 下面这段代码能</description>
    </item>
    
  </channel>
</rss>
