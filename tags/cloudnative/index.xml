<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cloudnative on Anonymous&#39; Blog</title>
    <link>https://huweicai.com/tags/cloudnative/</link>
    <description>Recent content in cloudnative on Anonymous&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Thu, 23 Dec 2021 01:19:00 +0800</lastBuildDate><atom:link href="https://huweicai.com/tags/cloudnative/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NodeLocalDNS实现原理</title>
      <link>https://huweicai.com/nodelocaldns-principle/</link>
      <pubDate>Thu, 23 Dec 2021 01:19:00 +0800</pubDate>
      
      <guid>https://huweicai.com/nodelocaldns-principle/</guid>
      <description>NodeLocalDNS 引入NodeLocalDNS的意义： 避免 contra</description>
    </item>
    
    <item>
      <title>镜像仓库Harbor Pull实现原理</title>
      <link>https://huweicai.com/harbor-pull-principle/</link>
      <pubDate>Sat, 04 Dec 2021 01:19:00 +0800</pubDate>
      
      <guid>https://huweicai.com/harbor-pull-principle/</guid>
      <description>Harbor简介 Harbor 是 VMWare 开源的一个镜像仓库平台，镜像分发和存储逻辑是基于 docker 开源的 registry (后更名为 distribution)实现的，Harbor 主要在其之上扩展了权限管理、镜像扫描、可视化管理后台等平台化功能，和大部分的云原生组件一样，Harbor 也是基于 Go 语言开发的。 Harbor 的系统架构如下图所示，箭头所指方向为数据流向： 一个镜像仓库最核心的功能就是推送和拉取，本文主要讨论 Harbor 镜像拉取具体的实现细节。 在开始之前 我</description>
    </item>
    
    <item>
      <title>Fluent Bit介绍</title>
      <link>https://huweicai.com/fluent-bit/</link>
      <pubDate>Wed, 05 May 2021 13:58:00 +0800</pubDate>
      
      <guid>https://huweicai.com/fluent-bit/</guid>
      <description>Fluent Bit Fluent Bit 是一款开源的日志收集组件，资源开销非常小，小到甚至能在嵌入式系统上运行，支持日志解析&amp;amp;过滤&amp;amp;转发，同时作为云原生基金会下的一个子项目，天然支持容器和 k8s 场景。 基本概念 大部分日志收集组件都将系统大致分为输入、缓冲区、输出三大部分，输入部分负责采集日志，采集了之后放在缓冲区，然后输出部分将其再转发到其他系统。 Fluent Bit 将这三大部分细分成了：输入、解析、过滤、缓冲区、路由、输出六个部分：</description>
    </item>
    
    <item>
      <title>Kubernetes权限管理概述</title>
      <link>https://huweicai.com/kubernetes-permissions-overview/</link>
      <pubDate>Thu, 18 Mar 2021 21:29:00 +0800</pubDate>
      
      <guid>https://huweicai.com/kubernetes-permissions-overview/</guid>
      <description>对于一个多用户系统而言，权限管理始终是无法忽略的一环，系统规模越大，权限管理就越重要。 以 Git 系统为例，你有一个代码仓库，你是这个仓库的管理员，你们组的同学具有提交代码的权限，你们部门的同学具有只读权限，公司的其他人全部无法查看，这就是一个典型的权限管理场景。 通常在校验权限中分为两个流程，认证和鉴权。 即先判断你是谁：认证，然后再鉴权，判断你有没有这个资源的权限。 毫无疑问，复杂的Kubernetes也具</description>
    </item>
    
    <item>
      <title>Kubectl基本概念&amp;常用命令</title>
      <link>https://huweicai.com/kubectl-concepts-and-commands/</link>
      <pubDate>Thu, 28 Jan 2021 15:01:00 +0800</pubDate>
      
      <guid>https://huweicai.com/kubectl-concepts-and-commands/</guid>
      <description>基本概念 容器化 + Kubernetes 逐渐成为云计算领域计算资源编排调度管理的事实标准，而 kubectl 则提供了一种非常直观和强大的观察操控 k8s集群的方式。 kubectl 是 kubernetes自带的 21 个命令行程序中的一个，其本身的逻辑并不复杂，使用 cobra 来解析命令行参数，读取 .kube/config中存储的认证信息经由 k8s restful api 和集群交互。 kubectl 命令基本格式如下： kubectl [子命令] [资源类型] [资源名称] [选项] 和 docker 、git这种复杂的命令行程序一样，kub</description>
    </item>
    
  </channel>
</rss>
